{"version":3,"sources":["components/location-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/forecast-details.js","components/search-form.js","components/app.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastSummary","data-testid","moment","date","format","temperature","description","name","iconId","icon","console","log","onClick","onSelect","ForecastSummaries","forecasts","map","forecast","key","max","onForecastSelect","ForecastDetails","min","humidity","wind","speed","prototype","PropTypes","shape","instanceOf","Date","isRequired","string","SearchForm","useState","searchText","setSearchText","type","placeholder","value","onChange","event","target","onCitySearch","App","selectedDate","setSelectedDate","setForecasts","location","setLocation","load","setLoad","selectedForecast","find","useEffect","axios","get","then","response","data","cityrequest","toLowerCase","catch","err","alert","render","document","getElementById"],"mappings":"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","file":"static/js/main.02fa137d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 className='location-details'>{props.city}, {props.country}</h1>\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n};\n\n\nexport default LocationDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\n\nimport '../styles/forecast-summary.css';\n\nconst ForecastSummary = (props) => {\n  return (\n  <div className='forecast-summary'>\n    <div className=\"date\" data-testid=\"date-id\">\n      <span>{moment(props.date).format('ddd Do MMM')}</span>\n    </div>\n    \n\n    <div>\n      <span className=\"temperature\" data-testid=\"temperature-id\">{props.temperature}&deg;c</span>\n    </div>\n\n    <div> \n      <span className=\"description\" data-testid=\"description-id\"> {props.description}</span>\n    </div>\n\n    <div className=\"icon\" data-testid=\"icon-id\">\n      <WeatherIcon name=\"owm\" iconId={props.icon} />\n    </div>\n    {console.log(props.icon)}\n    {console.log(typeof icon)}\n\n    <button className=\"summary-button\"  onClick={() => props.onSelect(props.date)}>More details</button>\n\n  </div>\n)\n};\n\n\nForecastSummary.propTypes = {\n  forecast: PropTypes.shape({\n    date: PropTypes.instanceOf(Date).isRequired,\n    temperature: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n    icon: PropTypes.string.isRequired,\n    onSelect: PropTypes.func,\n}),\n};\n\n\nexport default ForecastSummary;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastSummary from './forecast-summary';\n\nimport '../styles/forecast-summaries.css';\n\nconst ForecastSummaries = props => (\n<div className=\"forecast-summaries\">\n  {\n  props.forecasts.map(forecast => (\n    <ForecastSummary\n    key={forecast.date}\n    date={forecast.date}\n    description={forecast.description}\n    icon={forecast.icon}\n    temperature={forecast.temperature.max}\n    onSelect={props.onForecastSelect}\n    />\n  ))\n  }\n  </div>\n);\n\n\nForecastSummaries.propTypes ={\n  forecasts: PropTypes.array.isRequired,\n  onSelect: PropTypes.func,\n}\n\n\nexport default ForecastSummaries;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport '../styles/forecast-details.css';\n\nconst ForecastDetails = (props) => {\nreturn(\n  <div className=\"forcast-details\">\n    <div>\n      <span>\n        <h5 className=\"date-more\" data-testid=\"date-id\">{moment(props.forecasts.date).format('ddd Do MMM')}</h5>\n      </span>\n    </div>\n\n    <div>\n      <span> <h5 className=\"tempMax\" data-testid=\"tempMax-id\">Max Temperature: {props.forecasts.temperature.max}&deg;c</h5>\n      </span>\n    </div>\n    \n    <div>\n      <span> <h5 className=\"tempMin\" data-testid=\"tempMin-id\">Min Temperature: {props.forecasts.temperature.min}&deg;c</h5> </span>\n    </div>\n\n    \n    \n    <div>\n      <span> <h5 className=\"humidity\" data-testid=\"humidity-id\">Humidity: {props.forecasts.humidity}%</h5></span>\n    </div>\n\n    <div>\n      <span> <h5 className=\"wind\" data-testid=\"wind-id\">Wind: {props.forecasts.wind.speed}mph</h5></span>\n    </div>\n\n  </div>\n)\n};\n\nForecastDetails.prototype ={\n  forecast: PropTypes.shape({\n    date: PropTypes.instanceOf(Date).isRequired,\n    temperature: PropTypes.string.isRequired,\n    humidity: PropTypes.string.isRequired,\n    wind: PropTypes.string.isRequired,\n\n  }),\n};\n\nexport default ForecastDetails;","import React, { useState } from 'react';\n\nimport '../styles/search-form.css';\n\n\nconst SearchForm = (props) => {\n  \n  const [searchText, setSearchText] = useState('');\n  \n  const handleInputChange = (event) => {\n    setSearchText(event.target.value);\n    // console.log('event.target.value')\n  };\n\n  return (\n    <div className=\"search-form\">\n      <input className=\"search-input\" type=\"text\" placeholder=\"search for a city\" value={searchText} onChange={handleInputChange}></input>\n      <button className=\"search-button\" type=\"submit\" onClick={() => props.onCitySearch(searchText)}>Search</button>\n    </div>\n  );\n};\n\n\nexport default SearchForm;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationDetails from './location-details';\nimport ForecastSummaries from './forecast-summaries';\nimport ForecastDetails from './forecast-details';\n\nimport SearchForm from './search-form';\n\nimport '../styles/app.css';\n\n\nconst App = () =>   {\n  const [selectedDate, setSelectedDate] = useState(0);\n  \n  const [forecasts, setForecasts] = useState([]);\n\n  const [location, setLocation] = useState({\n    city: \"\",\n    country: \"\",\n  });\n\n  const [load, setLoad] = useState(false);\n\n  const selectedForecast = forecasts.find(forecast => forecast.date === selectedDate);\n\n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n  }\n\n  \n\n  useEffect(() => {\n    axios\n    .get(\"https://mcr-codes-weather.herokuapp.com/forecast/\")\n    .then((response) => {\n      setForecasts(response.data.forecasts);\n      setLocation(response.data.location); \n      setLoad(true);  \n    }) \n  }, []);\n\n  const doCitySearch = (city) => {\n    const cityrequest = city.toLowerCase();\n\n    axios.get(`https://mcr-codes-weather.herokuapp.com/forecast?city=${cityrequest}`)\n    .then((response) => {\n      setForecasts(response.data.forecasts);\n      setLocation(response.data.location);\n    })\n    .catch((err) => {\n      alert('Your searched City is not available');\n      setLoad(false);\n    }, []);\n  };\n  // \n  if (load) {\n    return (\n      <div className=\"forecast\">\n  \n  \n      <LocationDetails\n      city={location.city}\n      country={location.country}\n      />\n  \n      <SearchForm onCitySearch={doCitySearch}\n      />\n    \n      <ForecastSummaries \n      forecasts={forecasts}\n      onForecastSelect={handleForecastSelect}\n      />\n  \n      {\n        selectedForecast && (<ForecastDetails forecasts={selectedForecast} />)\n      }\n  \n    </div>\n    );\n  } else {\n    return <div className=\"loading\">please wait ...refresh the browser after 10sec...</div>   \n  }\n};\n\n  \n\n  \n\n\n\n\n\nexport default App;\n","import 'raf/polyfill';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/app';\n// import { location, forecasts } from './data/forecast.json';\n// import { forecasts } from './data/forecast.json'\n\n\nrender (<App />, document.getElementById('root'));\n\n/*render (<App name=\"Aaron\" location={location} forecasts={forecasts} />, document.getElementById('root'));*/\n\n\n"],"sourceRoot":""}